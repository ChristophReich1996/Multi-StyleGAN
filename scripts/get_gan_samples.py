# Script to generate sequences generated by the trained gan and exptrapolated of a trained simulation network
from argparse import ArgumentParser

# Manage command line arguments
parser = ArgumentParser()
parser.add_argument("--cuda_devices", default="0", type=str,
                    help="String of cuda device indexes to be used. Indexes must be separated by a comma.")
parser.add_argument("--sequences", default=100, type=int,
                    help="Batch size to be utilized while training.")
# Raft arguments
parser.add_argument('--small', action='store_true', help='use small model')
parser.add_argument('--mixed_precision', action='store_true', help='use mixed precision')
parser.add_argument('--alternate_corr', action='store_true', help='use efficent correlation implementation')
# Get arguments
args = parser.parse_args()

import torch
import torch.nn as nn
import torchvision
from tqdm import tqdm
from flow_vis import flow_to_color
import os

# Set cuda devices
os.environ["CUDA_VISIBLE_DEVICES"] = args.cuda_devices

from generation import TwinGenerator2D, style_gan_2_2d_generator_config
from generation.misc import get_noise


if __name__ == '__main__':
    with torch.no_grad():
        # Init and load generator
        generator = nn.DataParallel(TwinGenerator2D(config=style_gan_2_2d_generator_config).cuda())
        generator.load_state_dict(
            torch.load(
                "/home/creich/Neural_Simulation_of_TLFM_Experiments/trained_models/25_01_2021__09_20_41_gan/checkpoint_100.pt")[
                "generator_ema"])
        # Genrator into eval mode
        generator.eval()
        # Make sequences
        for index in tqdm(range(args.sequences)):
            # Get noise input
            noise_input = get_noise(batch_size=1, device="cuda", p_mixed_noise=0.0, latent_dimension=512)
            # Generate initial sequence
            sequence = generator(noise_input)
            # Get bf and gfp sequence
            bf_sequence = sequence[:, 0:1]
            gfp_sequence = sequence[:, 1:2]
            # Make bf and gfp to rgb
            bf_sequence = bf_sequence.repeat_interleave(3, dim=1)
            gfp_sequence = gfp_sequence.repeat_interleave(3, dim=1)
            gfp_sequence[:, 0] = 0.0
            gfp_sequence[:, 2] = 0.0
            # Reshape sequences
            bf_sequence = bf_sequence[0].permute(1, 0, 2, 3)
            gfp_sequence = gfp_sequence[0].permute(1, 0, 2, 3)
            # Save sequences
            torchvision.utils.save_image(tensor=bf_sequence,
                                         fp="sample_bf_{}.png".format(index), nrow=bf_sequence.shape[0],
                                         padding=0)
            torchvision.utils.save_image(tensor=gfp_sequence,
                                         fp="sample_gfp_{}.png".format(index), nrow=gfp_sequence.shape[0],
                                         padding=0)
